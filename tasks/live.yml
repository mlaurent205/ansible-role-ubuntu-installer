---
- name: create cloud-init dir
  file:
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}"
    state: directory

- block:

    - name: get interface info
      set_fact:
        ubuntu_installer_interface_ip: "{{ ubuntu_installer_interface.ipaddress }}/{{ ubuntu_installer_interface.netmask }}"

    - name: process interface info
      set_fact:
        ubuntu_installer_interface_netaddr: "{{ ubuntu_installer_interface_ip | ipaddr('host/netmask') }}"

    - name: set interface prefix
      set_fact:
        ubuntu_installer_interface_prefix: "{{ ubuntu_installer_interface_netaddr | ipaddr('prefix') }}"
      when: "'prefix' not in ubuntu_installer_interface"

    - name: set interface prefix
      set_fact:
        ubuntu_installer_interface_prefix: "{{ ubuntu_installer_interface.prefix }}"
      when: "'prefix' in ubuntu_installer_interface"

  when: not ubuntu_installer_interface.static | bool

- name: create cloud-init user data
  template:
    src: "user-data.j2"
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}/user-data"
  vars:
    ssh_user: "{{ ubuntu_installer_username }}"
    ssh_pass: "{{ ubuntu_installer_password }}"
    ssh_key: "{{ ubuntu_installer_sshkey }}"
    fqdn: "{{ ubuntu_installer_hostname }}"
    interface: "{{ ubuntu_installer_interface }}"
    interface_name: "{{ ubuntu_installer_interface_name }}"
    interface_prefix: "{{ ubuntu_installer_interface_prefix }}"
    disk: "{{ ubuntu_installer_disk | default('') }}"
    mirror_primary: "{{ ubuntu_installer_mirror }}"
    mirror_security: "{{ ubuntu_installer_security_mirror }}"
    packages: "{{ ubuntu_installer_image_packages }}"
    storage_layout: "{{ __ubuntu_installer_live_storage_map[ubuntu_installer_partman_method] }}"
    storage_config: "{{ ubuntu_installer_live_storage | default(__ubuntu_installer_live_storage[ubuntu_installer_partman_method]) }}"

- name: create cloud-init meta data
  file:
    dest: "{{ tmpdir_dest.path }}{{ ubuntu_installer_cloudinit }}/meta-data"
    state: touch

- name: set bootloader configuration
  template:
    src: isolinux.live.txt.j2
    dest: "{{ tmpdir_dest.path }}/isolinux/txt.cfg"
  vars:
    kernel_file: /casper/vmlinuz
    initrd_file: /casper/initrd
    nocloud_dir: "{{ ubuntu_installer_cloudinit }}"

- name: create ubuntu autoinstall iso
  command: "mkisofs {{ mkisofs_options }} -V 'ubuntu' -b isolinux/isolinux.bin -c isolinux/boot.cat -o {{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_hostname }}.iso ."
  args:
    chdir: "{{ tmpdir_dest.path }}"
  vars:
    mkisofs_options: "-ldots -allow-multidot -d -r -l -J -no-emul-boot -boot-load-size 4 -boot-info-table"
  changed_when: false
  tags:
    - skip_ansible_lint

- name: make iso bootable
  command: "isohybrid {{ ubuntu_installer_target_dir }}/{{ ubuntu_installer_hostname }}.iso"
  changed_when: false
