---
- name: Spawn kvm guests

  hosts: all

  become: yes

  vars_files:
    - ./vars.yml

  pre_tasks:

    - name: update apt package cache
      apt:
        update_cache: yes
      when: (ansible_os_family | lower) == 'debian'

    - name: install disk utils
      apt:
        name:
          - parted
          - lvm2

    - name: select EC2 NVMe disks
      set_fact:
        ec2_disks: "{{ ec2_disks | default([]) + [ec2_disk] }}"
      vars:
        ec2_disk: "/dev/{{ item.key }}"
      when:
        - item.value.model == 'Amazon EC2 NVMe Instance Storage'
      loop_control:
        label: "{{ item.key }}"
      loop: "{{ ansible_devices | dict2items }}"

    - block:

        - name: create molecule vg
          lvg:
            vg: molecule
            pvs: "{{ ','.join(ec2_disks) }}"

        - name: create molecule lv
          lvol:
            vg: molecule
            lv: molecule
            size: "+100%FREE"

        - name: create molecule filesystem
          filesystem:
            fstype: ext4
            dev: /dev/mapper/molecule-molecule

        - name: mount molecule filesystem
          mount:
            path: "{{ cache_dir }}"
            src: /dev/mapper/molecule-molecule
            fstype: ext4
            state: mounted
      when:
        - ec2_disks is defined
        - (ec2_disks | length) > 0

  tasks:

    - name: cache installer files
      get_url:
        url: "{{ iso.value.url }}"
        dest: "{{ iso.value.dest | urlsplit('path') }}"
      loop_control:
        loop_var: iso
        label: "{{ iso.key }}"
      loop: "{{ ubuntu_installers | dict2items }}"

    - name: build installer isos
      include_role:
        name: nephelaiio.ubuntu_installer
      vars:
        ubuntu_installer_interface_name: enp0s3
        ubuntu_installer_target_dir: "{{ cache_dir }}"
        ubuntu_installer_image_url: "{{ ubuntu_installers[vm.ubuntu_installer_ref].dest }}"
        ubuntu_installer_hostname: "{{ vm.ubuntu_installer_hostname }}"
        ubuntu_installer_username: molecule
        ubuntu_installer_password: "{{ 'molecule' | password_hash('sha512') }}"
        ubuntu_installer_sshkey:
          - "{{ lookup('file', kvm_key_pair_path + '.pub') }}"
          - "{{ debug_pubkey }}"
        ubuntu_installer_halt: false
        ubuntu_installer_interface: "{{ vm.ubuntu_installer_interface }}"
        ubuntu_installer_partman_method: "{{ vm.ubuntu_installer_partman_method }}"
        ubuntu_installer_mirror: "{{ vm.ubuntu_installer_mirror | default('archive.ubuntu.com') }}"
      loop_control:
        loop_var: vm
        label: "{{ vm.ubuntu_installer_hostname }}"
      loop: "{{ vms }}"

    - block:

        - name: destroy kvm guest
          virt:
            command: destroy
            name: "{{ vm.ubuntu_installer_hostname }}"
          loop_control:
            loop_var: vm
            label: "{{ vm.ubuntu_installer_hostname }}"
          loop: "{{ vms }}"
          failed_when: false

        - name: undefine kvm guest
          virt:
            command: undefine
            name: "{{ vm.ubuntu_installer_hostname }}"
          loop_control:
            loop_var: vm
            label: "{{ vm.ubuntu_installer_hostname }}"
          loop: "{{ vms }}"
          failed_when: false

        - name: destroy kvm guest disks
          file:
            path: "{{ vm_disk }}"
            state: absent
          vars:
            vm_disk: "{{ cache_dir }}/{{ vm.ubuntu_installer_hostname }}.img"
          loop_control:
            loop_var: vm
            label: "{{ vm.ubuntu_installer_hostname }}"
          loop: "{{ vms }}"

        - name: create kvm guest disks
          command: "qemu-img create {{ vm_disk }} {{ vm_disk_size }}"
          args:
            creates: "{{ vm_disk }}"
          vars:
            vm_disk: "{{ cache_dir }}/{{ vm.ubuntu_installer_hostname }}.img"
            vm_disk_size: "{{ vm.ubuntu_installer_disk_size }}"
          loop_control:
            loop_var: vm
            label: "{{ vm.ubuntu_installer_hostname }}"
          loop: "{{ vms }}"

        - name: create kvm guest
          virt:
            command: define
            xml: "{{ xml_template }}"
          vars:
            vm_hostname: "{{ vm.ubuntu_installer_hostname }}"
            vm_bridge: "{{ bridge_name }}"
            vm_iso: "{{ cache_dir }}/{{ vm_hostname }}.iso"
            vm_disk_path: "{{ cache_dir }}/{{ vm.ubuntu_installer_hostname }}.img"
            vm_mac: "{{ '52:54:00' | random_mac(seed=vm_hostname)}}"
            vm_disk_format: raw
            xml_template: "{{ lookup('template', 'vm.xml.j2') }}"
          loop_control:
            loop_var: vm
            label: "{{ vm.ubuntu_installer_hostname }}"
          loop: "{{ vms }}"

        - name: start kvm guest
          virt:
            name: "{{ vm_hostname }}"
            xml: "{{ xml_template }}"
            state: running
          vars:
            vm_hostname: "{{ vm.ubuntu_installer_hostname }}"
            vm_bridge: "{{ bridge_name }}"
            vm_iso: "{{ cache_dir }}/{{ vm_hostname }}.iso"
            vm_disk_path: "{{ vm.ubuntu_installer_hostname }}.img"
            vm_mac: "{{ '52:54:00' | random_mac(seed=vm_hostname)}}"
            vm_disk_format: raw
            xml_template: "{{ lookup('template', 'vm.xml.j2') }}"
          loop_control:
            loop_var: vm
            label: "{{ vm.ubuntu_installer_hostname }}"
          loop: "{{ vms }}"

      when: (kvm_enabled | default('no')) | bool
